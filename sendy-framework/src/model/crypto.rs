use std::net::IpAddr;

use bytes::Bytes;
use rsa::{sha2::Sha256, pkcs1v15::{DecryptingKey, SigningKey, VerifyingKey, EncryptingKey}};

use crate::ser::FromBytes;



/// A collection of public **and private** cryptographic keys used to sign
/// and decrypt messages, this should never be shared and does not implement to and from Bytes
#[derive(Debug)]
pub struct PrivateKeychain {
    /// RSA keys used to sign messages that have been sent
    pub auth: SigningKey<Sha256>,
    /// RSA keys used to encrypt and decrypt messages for symmetric session key transfers
    pub enc: DecryptingKey,
}

/// A collection of public keys that are used to verify digitally signed messages and encrypt
/// messages, this must be sent to every peer
#[derive(Debug)]
pub struct PublicKeychain {
    /// Verification key that can authenticate signed messages
    pub auth: VerifyingKey<Sha256>,
    /// Public encryption key
    pub enc: EncryptingKey,
}

/// A signed certificate that states the IP address that owns a set of public keys used for
/// authorization and encryption
#[derive(Debug)]
pub struct SignedCertificate {
    /// The public keychain and owner IP address, natively accessible from Rust code
    repr: UnsignedCertificate,
    /// The encoded bytes of the certificate, used to verify the certificate with the signature
    cert: Bytes,
    /// The signature that should have been generated by a trusted private key
    signature: Bytes,
}

/// A certificate claiming ownership over a set of public keys that has not yet been signed by a
/// private key
///
/// Format:
/// ([PublicKeychain])
/// ([IpAddr])
#[derive(Debug)]
pub struct UnsignedCertificate {
    /// The keys that the IP address in this certificate claims
    keys: PublicKeychain,
    /// The IP address of the peer that is claiming these keys
    owner: IpAddr,
}


impl FromBytes for SignedCertificate {
    fn parse(reader: &mut untrusted::Reader<'_>) -> Result<Self, crate::ser::FromBytesError> {
        
    }
}

impl FromBytes for UnsignedCertificate {
    fn parse(reader: &mut untrusted::Reader<'_>) -> Result<Self, crate::ser::FromBytesError> {
        
    }
}
